FUNCTION:

1. You can store function in a variable.
2. You can have a function return a function.
3. You can have a function take in a function as an argument.  
There three properties make functions in javascript first class functions.


PASSING FUNCTION AS A ARGUMENT TO OTHER functions
function Rectangle (length, breadth, color) {
    this.length = length;
    this.breadth = breadth;
    this.color = color;
    this.area: function() {
        return this.legth * this.breadth;
    }
}
compare(rectangle1, rectangle2, compareRectangleByArea);

function compare(rectangle1, rectangle2, conpareRectabgle) {
    return compareRectangle(rectangle1, rectangle2);
}

function compareRectangleByArea(rectangle1, rectangle2) {
    return Math.sign(rectangle1.area() - rectangle2.area());
}

STRINGS AND NUMBERS - BUT NOT OBJECTS - ARE 'PASSED-BY-VALUE' TO FUNCTIONS:
1. In other words, A copy is made of string or number variables.
2. And the function works with the copy - not the original.
3. Even if function modifies the variable, the original is unchanged.

function passByValue() {
    var x = 10;
    var y = 'test';
    console.log(x, y);   // 10, test
    modify(x, y);
    console.log(x, y);   // 10, test
}

function modify(number, string) {
    console.log(number, string); // 10, test
    number = number + 10;
    string = 'Test1';
    console.log(number, string); // 20, Test1
}


OBJECTS AND ARRAYS ARE 'PASSED-BY-REFERENCE' TO FUNCTION:
1. Object and arrays - unlike numbers or strings- are passed in as is to functions
2. So function works with original - not a copy.
3. If function modifies the variable the original is indeed chnaged.
function modify(rectangle, weekDays) {
    rectangle.length = rectangle.length * 2;
    weekDays.push('Manic Mondays');
}
                BUT
4. If function reassigns the variable, The original is not changed.
function reassign(rectangle, weekDays) {
    rectangle = new Rectangle(5, 5, 'Red');
    weekDays = ['Sat', 'Sun'];
}



DECLARED FUNCTION AND FUNCTION LITERALS

DECLARED FUNCTION: 
Are just regular functions created like this .

function declaredFunction () {
    console.log('this a declared function);
}

FUNCTION LITERALS:

var someFunction = function () {  ---Anonymous Function
    console.log('function literal)
}

The right hand side part which function and its body is called function expression.


DECLARED FUNCTION VS FUNCTION LITERALS:

1. Declared functions all come in existence before any function literal come into existsence.
2. The javascript interpreter process all declared functions as the page is loading.
3. Function literals only come into existence when the corresponding function expression is evaluated.
4. Function expressions can only be evaluated when javascript code runs.
5. All declared functions, No matter where they appear in the code , are hoisted to top.
6. Function listerals can be used only after being evaluated.

HOISTING IN ACTION:

function functionExample() {
    declaredFunction();      --- //OUTPUT 'declared Function'
    try {
        someFunction();      //OUTPUT undefined
    }catch(err) {
        console.log(err);
    }
    var someFunction = function () {
        console.log('functional Literal');
    }

    someFunction();               //OUTPUT function literal
} 

function declaredFunction() {
    console.log('declared function');
}

7.function literal use anonymous function but not in all case , function literal can be written like this.

var nameFunction = function foo(x) {
    console.log(x);
}

nameFunction(1) //OUTPUT = 1;
foo(1);  //OUTPUT = Reference error function foo is not defined.

Whats the point of having a name if you can't use it then?
ANSWER: Recursion.
You can use the name of the function expression to refer to itself inside the body of the function.

var namedFunction = function foo(x) {
    console.log('function literal with named function');
    if(x == 1) {
        foo(2);
    }
}
