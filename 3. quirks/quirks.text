QUIRKS:

SPECIAL VALUES:
udefined: Indiccate that value does not exist.
null: A special value that does exists, but is null.
NaN: Not a Number (But still a number).
Infinity: A special value, bigger than any number.


UNTERSTANDING undefined:
1. Variable has been declared, but not initialized, its value is undefined.
var someVariable;  //undefined
2. A function has no return value, but you attempt to access it . Its value is undefined.
function getRectangleArea(length, breadth) {
    var area = length * breadth;
}
var someVariable = getRectangleArea(5, 5); // undefined
3. A variable does not exist, And you attempt to use it value, It will be undefined.
console.log(test);  //test undefined
4. A function does not exist, And you attemt to call it - An error result - Not undefined
getRectangleShape(); //Uncaught RefernceError: getRectangleShape is not defined. 
5. You attempt to access a non-existent property of an object - undefined.(Or even if property did exist , but it was deleted)
console.log(rectangle.redius); //undefined
6. You can call typeof operator on something that is undefined and output will be undefined.
console.log(typeof unInitialisedVariable);  //undefined.


UNDERSTANDING null:
-null is special value, specifically assigned to a variable.
var code = document.getElementById('code');
-If there is no HTML element with Id = 'code' in HTML webpage, then document.getElementById returns null;
1. You call the typeof operator on something that is null, You get - object.
var nullVariable = null;
console.log(typeof nullVariable); //object
2. You compare undefined And null you get - true.


UNDERSTANDING NaN:(NOT A NUMBER)
IsNaN(x);

console.log(IsNaN(123)); //false
console.log(IsNaN('123')); //false -String that is converted in the number that's why is not NaN
console.log(IsNaN(Math.sqrt(-1))); //true  
console.log(IsNaN('Hello)); //true
console.log(IsNaN('')); //false // empty string is converted in to Zero(0);
console.log(IsNaN(undefined)); //true
console.log(IsNaN(null)); //false // null is converted to ZERO(0).
console.log(IsNaN(0/0)); //true
console.log(IsNaN('NaN')); //true

typeof NaN;  //number



STRING AND NUMBER 

console.log(5 + '10'); //510
console.log( 5 * '10'); //50
console.log( '10' / '5'); //2
console.log( '10' - '5');  //5

javascript tries to convert number to string in case of addition.


STRANGE COMPARISON 

UNDERSTANDING == AND ===
= assignment operator 
== is know as the equality operator
1. compare value. And will perform converstions, such as from number to string
=== is know as the strict equality operator.
1. compare types and value. And will not perform conversion.

For objects there is no difference between these operators(== && ===) - Only for strings and numbers.

=== compare string and number Always false.
== compare string and number May be true e.g 123 == "123" 

null == undefined //true
null === undefined // false

"" == 0   // true
"" === 0  // false

TRUTHY AND FALSEY

TRUTY : Anything that can be converted by javascript To True
e.g. {}, [], and all the positive and negative numbers.

FALSEY:
e.g. Null, undefined, "", 0, false, NaN

perform If Statement on following Statement and get TRUTHY and FALSEY result

if(result 0) // FALSEY
if(result -1) // TRUTHY
if(result 5) //TRUTHY
if(result null) // FALSEY
if(result false) // FALSEY
if(result undefined) //FALSEY
if(result 'Hello') //TRUTHY
if(result '') //FALSEY
if(result []) //TRUTHY
if(result 'NaN') // TRUTHY
if(result NaN) //FALSEY
if(result {}) // TRUTHY



STRING
1. In javascript strings are objects, but they behave like primitive types.
2. They have a host of helpful properties that we use all the time.
3. For instance, string seems to be passed by value - changing a string inside a function does not change 
its value
4. Strings are object but they are not passed by reference because strings are IMMUTABLE OBJECT