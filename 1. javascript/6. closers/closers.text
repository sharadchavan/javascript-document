CLOSERS: NESTED FUNCTION + VARIABLE LOCAL TO THE OUTER SCOPE(REFERENCING ENVIRONMENT)
1.The nested function can access the referencing environment - even though those variable are
outside the scope.
2. The nested function carries around that referencing environment even after the scope has 
"gone away".

Now there could be multiple nested functions in the referencing environment. They will all share the same 
variables. (Not Copies)

3. The closere variable always wins over either local or global variable. 

function Circle(r) {
    this.radius = r;
} 

var PI = 3.14;
window.onload = function() {
    var circle1 = new Circle(3);
    var circle2 = new Circle(4);
    var circle3 = new Circle(5);

    var circleArray = [circle1, circle2, circle3];
    var PI = 3.1415;

    var printStuffAboutCircleArray =  function(circleArray) {
        var PI = 3.14159;

        var getArea = function(cricle) {
            console.log(`PI ${PI}`);
            return PI * circle.radius * circle.radius;
        }
        for(var i= 0; i < circleArray.length; i++) {
            var c = circleArray[i];
            console.log(`Area ${getArea(c)}`);
        }
        return getArea;
    };

    var areaFunction = printStuffAboutCircleArray(circleArray);
    areaFunction(circle1);

}



1. The "No" Button will keep track of the no votes without using closeres.

var noVotes = 0;

window.onload = function() {
    var yesButton = document.getElementById('yesButton');
    var noButton = document.getElementById('noButton');
    var yesVote = 0;

    noButton.onclick = countNoVotes;

    yesButton.onclick = function() {
        yesVotes++;
    var yesVoteMessage = document.getElementById('yesVotes');
    yesVotesMessage.innerHTML = `No Votes ${yesVotes}`

    }
}

function countNoVotes() {
    noVotes++;
    var noVoteMessage = document.getElementById('noVotes');
    noVoteMessage.innerHTML = `No Votes ${noVotes}`
}



------------------------------------------------------------------------

function greet(whatToSay) {
    return function(name) {
        console.log(`${whatToSay} ${name}`);
    }
}

var sayHi = greet('Hi');
sayHi('Tony');



WEIRD BEHAVIOUR OF CLOSERES

function buildFunctions() {
    var arr = [];
    for( var i = 0; i < 3; i++) {
        arr.push(function() {
            console.log(i);
        });
    }
    return arr;

}

var fs = buildFunctions();
fs[0]();  //OUTPUT 3
fs[1]();  //OUTPUT 3
fs[2]();  //OUTPUT 3

